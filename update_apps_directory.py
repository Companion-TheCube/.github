#!/usr/bin/env python3
import os
import base64
import requests
import sys

# ─── CONFIGURATION ─────────────────────────────────────────────────────────────

# Personal access token with 'repo' scope (set in env or paste here)
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

ORG               = "Companion-TheCube"
DIRECTORY_REPO    = "TheCube-apps-directory"
README_PATH       = "README.md"
BRANCH            = "main"  # or your default branch name

# ─── CONSTANTS ──────────────────────────────────────────────────────────────────

API_ROOT = "https://api.github.com"
HEADERS  = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept":        "application/vnd.github.v3+json"
}

# ─── HELPERS ────────────────────────────────────────────────────────────────────

def list_app_repos():
    """Return list of dicts: {name, url, description} for every App-* repo."""
    apps = []
    page = 1
    while True:
        resp = requests.get(
            f"{API_ROOT}/orgs/{ORG}/repos?per_page=100&page={page}",
            headers=HEADERS
        )
        resp.raise_for_status()
        repos = resp.json()
        if not repos:
            break
        for r in repos:
            name = r["name"]
            if name.startswith("App-"):
                apps.append({
                    "name":        name,
                    "url":         r["html_url"],
                    "description": r.get("description") or ""
                })
        page += 1
    return apps

def build_readme(apps):
    """Construct the README.md content as Markdown."""
    lines = []
    lines.append("# TheCube Apps Directory")
    lines.append("")
    lines.append("A directory of all official **TheCube** applications, with links to their repositories and short descriptions.")
    lines.append("")
    lines.append("## Apps")
    lines.append("")
    for app in sorted(apps, key=lambda x: x["name"].lower()):
        desc = app["description"].strip()
        if desc:
            lines.append(f"- [{app['name']}]({app['url']}) — {desc}")
        else:
            lines.append(f"- [{app['name']}]({app['url']})")
    lines.append("")
    lines.append("_Last updated: auto-generated by `update_apps_directory.py`_")
    return "\n".join(lines)

def get_readme_sha():
    """Fetch the current README.md SHA so we can update it."""
    resp = requests.get(
        f"{API_ROOT}/repos/{ORG}/{DIRECTORY_REPO}/contents/{README_PATH}?ref={BRANCH}",
        headers=HEADERS
    )
    if resp.status_code == 200:
        return resp.json()["sha"]
    resp.raise_for_status()

def update_readme(content, sha):
    """Commit the new README.md content back to the repo."""
    encoded = base64.b64encode(content.encode("utf-8")).decode("utf-8")
    data = {
        "message": "chore: update apps directory README",
        "content": encoded,
        "sha":     sha,
        "branch":  BRANCH
    }
    resp = requests.put(
        f"{API_ROOT}/repos/{ORG}/{DIRECTORY_REPO}/contents/{README_PATH}",
        headers=HEADERS,
        json=data
    )
    resp.raise_for_status()
    return resp.json()

# ─── MAIN ───────────────────────────────────────────────────────────────────────

def main():
    if not GITHUB_TOKEN.startswith("ghp_"):
        print("❌ Please set a valid GITHUB_TOKEN with repo scope.", file=sys.stderr)
        sys.exit(1)

    print("🔍 Fetching App-* repos…")
    apps = list_app_repos()
    print(f"✅ Found {len(apps)} apps.\n")

    print("📄 Building README.md content…")
    new_readme = build_readme(apps)

    print("📥 Retrieving current README.md SHA…")
    sha = get_readme_sha()
    print(f"✅ Current SHA = {sha}\n")

    print("📤 Updating README.md in TheCube-apps-directory…")
    result = update_readme(new_readme, sha)
    print("✅ README.md updated successfully!")
    print("→ Commit URL:", result["commit"]["html_url"])

if __name__ == "__main__":
    main()
