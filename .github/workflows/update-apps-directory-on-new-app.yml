# .github/workflows/update-apps-directory-on-new-app.yml
name: Update Apps Directory on New App-*

on:
  schedule:
  - cron: 0 2 * * *

jobs:
  update-directory:
    # only run when the new repo's name starts with "App-"
    if: startsWith(github.event.repository.name, 'App-')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout TheCube-apps-directory
        uses: actions/checkout@v3
        with:
          repository: Companion-TheCube/TheCube-apps-directory
          token: ${{ secrets.ORG_PAT }}
          path: directory

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install requests

      - name: Generate update script
        run: |
          cat > directory/update_apps_directory.py << 'EOF'
          #!/usr/bin/env python3
          import os, base64, requests, sys

          TOKEN = os.getenv('GITHUB_TOKEN') or sys.exit('No GITHUB_TOKEN')
          ORG   = 'Companion-TheCube'
          DIR_REPO = 'TheCube-apps-directory'
          README = 'README.md'
          BRANCH = 'main'
          API    = 'https://api.github.com'
          HEADERS = {
            'Authorization': f'Bearer {TOKEN}',
            'Accept':        'application/vnd.github.v3+json'
          }

          def list_apps():
              apps, page = [], 1
              while True:
                  r = requests.get(f'{API}/orgs/{ORG}/repos?per_page=100&page={page}', headers=HEADERS)
                  r.raise_for_status()
                  batch = r.json()
                  if not batch: break
                  for repo in batch:
                      name = repo['name']
                      if name.startswith('App-'):
                          apps.append({
                              'name': name,
                              'url':  repo['html_url'],
                              'desc': repo.get('description') or ''
                          })
                  page += 1
              return apps

          def build_readme(apps):
              lines = [
                  '# TheCube Apps Directory',
                  '',
                  'A directory of all official **TheCube** applications.',
                  '',
                  '## Apps',
                  ''
              ]
              for a in sorted(apps, key=lambda x: x['name'].lower()):
                  desc = f" â€” {a['desc']}" if a['desc'] else ''
                  lines.append(f"- [{a['name']}]({a['url']}){desc}")
              lines.append('')
              lines.append('_Last updated: auto-generated by Action_')
              return '\\n'.join(lines)

          def get_sha():
              r = requests.get(f"{API}/repos/{ORG}/{DIR_REPO}/contents/{README}?ref={BRANCH}", headers=HEADERS)
              r.raise_for_status()
              return r.json()['sha']

          def update_readme(content, sha):
              data = {
                  'message': 'chore: update apps directory',
                  'content': base64.b64encode(content.encode()).decode(),
                  'sha': sha,
                  'branch': BRANCH
              }
              r = requests.put(f"{API}/repos/{ORG}/{DIR_REPO}/contents/{README}", headers=HEADERS, json=data)
              r.raise_for_status()

          if __name__ == '__main__':
              apps = list_apps()
              readme = build_readme(apps)
              sha    = get_sha()
              update_readme(readme, sha)
          EOF

      - name: Run update script
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_PAT }}
        run: |
          python directory/update_apps_directory.py

      - name: Commit & push changes
        working-directory: directory
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add README.md
          if ! git diff --quiet; then
            git commit -m "chore: update apps directory (new repo ${{ github.event.repository.name }})"
            git push origin main
          else
            echo "No changes to commit."
          fi
